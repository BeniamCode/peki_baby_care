rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuth() {
      return request.auth != null;
    }
    
    // Helper function to check if user owns the resource
    function isOwner(userId) {
      return isAuth() && request.auth.uid == userId;
    }
    
    // Helper function to check if user is parent of the baby
    function isParentOf(babyId) {
      return isAuth() && 
        exists(/databases/$(database)/documents/babies/$(babyId)) &&
        request.auth.uid in get(/databases/$(database)/documents/babies/$(babyId)).data.parentIds;
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if isOwner(userId);
      allow create: if isAuth() && request.auth.uid == userId;
      allow update: if isOwner(userId) && 
        request.resource.data.uid == userId; // Prevent changing uid
      allow delete: if false; // Users can't delete their accounts through Firestore
    }
    
    // Babies collection
    match /babies/{babyId} {
      allow read: if isAuth() && request.auth.uid in resource.data.parentIds;
      allow create: if isAuth() && 
        request.auth.uid in request.resource.data.parentIds &&
        request.resource.data.keys().hasAll(['name', 'dateOfBirth', 'gender', 'parentIds', 'createdAt', 'updatedAt']);
      allow update: if isParentOf(babyId) &&
        request.resource.data.parentIds == resource.data.parentIds; // Can't change parent IDs
      allow delete: if isParentOf(babyId);
    }
    
    // Feedings collection
    match /feedings/{feedingId} {
      allow read: if isAuth() && isParentOf(resource.data.babyId);
      allow create: if isAuth() && 
        isParentOf(request.resource.data.babyId) &&
        request.resource.data.keys().hasAll(['babyId', 'type', 'startTime', 'createdAt', 'createdBy']) &&
        request.resource.data.createdBy == request.auth.uid;
      allow update: if isAuth() && 
        isParentOf(resource.data.babyId) &&
        request.resource.data.babyId == resource.data.babyId; // Can't change baby ID
      allow delete: if isAuth() && isParentOf(resource.data.babyId);
    }
    
    // Sleep collection
    match /sleeps/{sleepId} {
      allow read: if isAuth() && isParentOf(resource.data.babyId);
      allow create: if isAuth() && 
        isParentOf(request.resource.data.babyId) &&
        request.resource.data.keys().hasAll(['babyId', 'startTime', 'createdAt', 'createdBy']) &&
        request.resource.data.createdBy == request.auth.uid;
      allow update: if isAuth() && 
        isParentOf(resource.data.babyId) &&
        request.resource.data.babyId == resource.data.babyId;
      allow delete: if isAuth() && isParentOf(resource.data.babyId);
    }
    
    // Diapers collection
    match /diapers/{diaperId} {
      allow read: if isAuth() && isParentOf(resource.data.babyId);
      allow create: if isAuth() && 
        isParentOf(request.resource.data.babyId) &&
        request.resource.data.keys().hasAll(['babyId', 'type', 'timestamp', 'createdBy']) &&
        request.resource.data.createdBy == request.auth.uid;
      allow update: if isAuth() && 
        isParentOf(resource.data.babyId) &&
        request.resource.data.babyId == resource.data.babyId;
      allow delete: if isAuth() && isParentOf(resource.data.babyId);
    }
    
    // Medicines collection
    match /medicines/{medicineId} {
      allow read: if isAuth() && isParentOf(resource.data.babyId);
      allow create: if isAuth() && 
        isParentOf(request.resource.data.babyId) &&
        request.resource.data.keys().hasAll(['babyId', 'name', 'administeredAt', 'createdBy']) &&
        request.resource.data.createdBy == request.auth.uid;
      allow update: if isAuth() && 
        isParentOf(resource.data.babyId) &&
        request.resource.data.babyId == resource.data.babyId;
      allow delete: if isAuth() && isParentOf(resource.data.babyId);
    }
    
    // Notes collection
    match /notes/{noteId} {
      allow read: if isAuth() && isParentOf(resource.data.babyId);
      allow create: if isAuth() && 
        isParentOf(request.resource.data.babyId) &&
        request.resource.data.keys().hasAll(['babyId', 'title', 'content', 'category', 'timestamp', 'createdBy']) &&
        request.resource.data.createdBy == request.auth.uid;
      allow update: if isAuth() && 
        isParentOf(resource.data.babyId) &&
        request.resource.data.babyId == resource.data.babyId;
      allow delete: if isAuth() && isParentOf(resource.data.babyId);
    }
    
    // Growth records collection
    match /growth/{recordId} {
      allow read: if isAuth() && isParentOf(resource.data.babyId);
      allow create: if isAuth() && 
        isParentOf(request.resource.data.babyId) &&
        request.resource.data.keys().hasAll(['babyId', 'date', 'createdBy']) &&
        request.resource.data.createdBy == request.auth.uid;
      allow update: if isAuth() && 
        isParentOf(resource.data.babyId) &&
        request.resource.data.babyId == resource.data.babyId;
      allow delete: if isAuth() && isParentOf(resource.data.babyId);
    }
  }
}