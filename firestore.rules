rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidTimestamp(timestamp) {
      return timestamp is timestamp && 
             timestamp >= timestamp.date(1900, 1, 1) && 
             timestamp <= request.time;
    }
    
    function hasRequiredFields(fields) {
      return request.resource.data.keys().hasAll(fields);
    }
    
    // Users collection - users can only access their own data
    match /users/{userId} {
      allow read, write: if isOwner(userId);
      allow create: if isAuthenticated() && 
                      request.auth.uid == userId &&
                      hasRequiredFields(['email', 'displayName', 'createdAt']) &&
                      request.resource.data.createdAt == request.time;
      
      // Babies subcollection under each user
      match /babies/{babyId} {
        allow read, write: if isOwner(userId);
        allow create: if isAuthenticated() && 
                        request.auth.uid == userId &&
                        hasRequiredFields(['name', 'dateOfBirth', 'gender', 'createdAt', 'createdBy']) &&
                        request.resource.data.createdBy == request.auth.uid &&
                        isValidTimestamp(request.resource.data.dateOfBirth) &&
                        request.resource.data.gender in ['male', 'female', 'other'];
        
        // Feeding records subcollection
        match /feedings/{feedingId} {
          allow read, write: if isOwner(userId);
          allow create: if isAuthenticated() && 
                          request.auth.uid == userId &&
                          hasRequiredFields(['babyId', 'type', 'startTime', 'createdAt', 'createdBy']) &&
                          request.resource.data.babyId == babyId &&
                          request.resource.data.createdBy == request.auth.uid &&
                          request.resource.data.type in ['breast', 'bottle', 'solid'] &&
                          isValidTimestamp(request.resource.data.startTime);
        }
        
        // Diaper records subcollection
        match /diapers/{diaperId} {
          allow read, write: if isOwner(userId);
          allow create: if isAuthenticated() && 
                          request.auth.uid == userId &&
                          hasRequiredFields(['babyId', 'type', 'changeTime', 'hasRash', 'createdAt', 'createdBy']) &&
                          request.resource.data.babyId == babyId &&
                          request.resource.data.createdBy == request.auth.uid &&
                          request.resource.data.type in ['wet', 'dirty', 'mixed', 'dry'] &&
                          request.resource.data.hasRash is bool &&
                          isValidTimestamp(request.resource.data.changeTime);
        }
        
        // Sleep records subcollection
        match /sleep/{sleepId} {
          allow read, write: if isOwner(userId);
          allow create: if isAuthenticated() && 
                          request.auth.uid == userId &&
                          hasRequiredFields(['babyId', 'startTime', 'sleepType', 'createdAt', 'createdBy']) &&
                          request.resource.data.babyId == babyId &&
                          request.resource.data.createdBy == request.auth.uid &&
                          request.resource.data.sleepType in ['nap', 'night'] &&
                          isValidTimestamp(request.resource.data.startTime);
        }
        
        // Medicine records subcollection
        match /medicines/{medicineId} {
          allow read, write: if isOwner(userId);
          allow create: if isAuthenticated() && 
                          request.auth.uid == userId &&
                          hasRequiredFields(['babyId', 'medicineName', 'type', 'dosage', 'unit', 'givenAt', 'isCompleted', 'createdAt', 'createdBy']) &&
                          request.resource.data.babyId == babyId &&
                          request.resource.data.createdBy == request.auth.uid &&
                          request.resource.data.type in ['liquid', 'tablet', 'drops', 'cream', 'injection', 'other'] &&
                          request.resource.data.unit in ['ml', 'mg', 'drops', 'applications'] &&
                          request.resource.data.dosage is number &&
                          request.resource.data.dosage > 0 &&
                          request.resource.data.isCompleted is bool &&
                          isValidTimestamp(request.resource.data.givenAt);
        }
        
        // Growth records subcollection
        match /growth/{growthId} {
          allow read, write: if isOwner(userId);
          allow create: if isAuthenticated() && 
                          request.auth.uid == userId &&
                          hasRequiredFields(['babyId', 'recordedAt', 'measurements', 'createdAt', 'createdBy']) &&
                          request.resource.data.babyId == babyId &&
                          request.resource.data.createdBy == request.auth.uid &&
                          isValidTimestamp(request.resource.data.recordedAt) &&
                          request.resource.data.measurements is map;
        }
        
        // Notes subcollection
        match /notes/{noteId} {
          allow read, write: if isOwner(userId);
          allow create: if isAuthenticated() && 
                          request.auth.uid == userId &&
                          hasRequiredFields(['babyId', 'title', 'content', 'category', 'isImportant', 'createdAt', 'createdBy']) &&
                          request.resource.data.babyId == babyId &&
                          request.resource.data.createdBy == request.auth.uid &&
                          request.resource.data.category in ['milestone', 'health', 'behavior', 'development', 'general'] &&
                          request.resource.data.isImportant is bool &&
                          request.resource.data.title is string &&
                          request.resource.data.content is string;
        }
      }
    }
    
    // Legacy collections for backward compatibility (if any exist)
    // These will be gradually migrated to the new structure
    match /babies/{babyId} {
      allow read: if false; // Force migration to new structure
      allow write: if false; // Force migration to new structure
    }
    
    match /feedings/{feedingId} {
      allow read: if false; // Force migration to new structure
      allow write: if false; // Force migration to new structure
    }
    
    match /diapers/{diaperId} {
      allow read: if false; // Force migration to new structure
      allow write: if false; // Force migration to new structure
    }
    
    match /sleeps/{sleepId} {
      allow read: if false; // Force migration to new structure
      allow write: if false; // Force migration to new structure
    }
    
    match /medicines/{medicineId} {
      allow read: if false; // Force migration to new structure
      allow write: if false; // Force migration to new structure
    }
    
    match /notes/{noteId} {
      allow read: if false; // Force migration to new structure
      allow write: if false; // Force migration to new structure
    }
    
    match /growth/{recordId} {
      allow read: if false; // Force migration to new structure
      allow write: if false; // Force migration to new structure
    }
    
    // Deny access to all other documents
    match /{document=**} {
      allow read, write: if false;
    }
  }
}